require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SongsController do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SongsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before :each do
    #FactoryGirl.lint
    some_user = FactoryGirl.create(:user)
    sign_in some_user
    @song = FactoryGirl.create(:song)
    @invalid_song = FactoryGirl.build(:invalid_song)
    @album = FactoryGirl.create(:album)
    @artist = FactoryGirl.create(:artist)
  end

  describe "GET index" do
    it "assigns all songs as @songs" do
      get :index, {}, valid_session
      assigns(:songs).should eq([@song])
    end

    it "renders the :index view" do
      get :index, {}, valid_session
      response.should render_template :index
    end
  end

  describe "GET show" do
    it "assigns the requested song as @song" do
      get :show, {:id => @song.to_param}, valid_session
      assigns(:song).should eq(@song)
    end

    it "renders the #show view" do
      get :show, {:id => @song.to_param}, valid_session
      response.should render_template :show
    end
  end

  describe "GET new" do
    it "assigns a new song as @song" do
      get :new, {}, valid_session
      assigns(:song).should be_a_new(Song)
    end

    it "should render the #new view" do
      get :new, {}, valid_session
      response.should render_template :new
    end
  end

  describe "GET edit" do
    it "assigns the requested song as @song" do
      get :edit, {:id => @song.to_param}, valid_session
      assigns(:song).should eq(@song)
    end

    it "should render the #edit view" do
      get :edit, {:id => @song.to_param}, valid_session
      response.should render_template :edit
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Song" do
        expect {
          post :create, {:song => FactoryGirl.attributes_for(:song),
            :artist_name => @artist.name, 
            :album_name => @album.album_title, 
            :genre => @album.genre}, valid_session
        }.to change(Song, :count).by(1)
      end

      it "assigns a newly created song as @song" do
        post :create, {:song => FactoryGirl.attributes_for(:song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
        assigns(:song).should be_a(Song)
        assigns(:song).should be_persisted
      end

      it "redirects to the created song" do
        post :create, {:song => FactoryGirl.attributes_for(:song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
        response.should render_template ('created')
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved song as @song" do
        # Trigger the behavior that occurs when invalid params are submitted
        Song.any_instance.stub(:save).and_return(false)
        post :create, {:song => FactoryGirl.attributes_for(:invalid_song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
        assigns(:song).should be_a_new(Song)
      end

      it "does not save the new song" do
        expect{
        post :create, {:song => FactoryGirl.attributes_for(:invalid_song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
        }.to_not change(Song, :count)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Song.any_instance.stub(:save).and_return(false)
        post :create, {:song => FactoryGirl.attributes_for(:invalid_song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do

      it "locates the requested song" do
        put :update, {id: @song, song: FactoryGirl.attributes_for(:song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
        assigns(:song).should eq(@song)
      end

      it "updates the requested song" do
        # Assuming there are no other songs in the database, this
        # specifies that the Song created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Song.any_instance.should_receive(:update).with(
          {"song_title" => "Test_change", "track" => "1/10", "duration" => "180",
          "path" => "/test/path", "filename" => "test_file.mp3", "composer" => "test_composer"}
          )
        put :update, {:id => @song.to_param, 
          :song => FactoryGirl.attributes_for(:song, song_title: 'Test_change'),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
      end

      it "changes the song's attributes" do
        put :update, {:id => @song.to_param, 
          :song => FactoryGirl.attributes_for(:song, song_title: 'Test_change'),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
        @song.reload
        @song.song_title.should eq('Test_change')
      end

      it "assigns the requested song as @song" do
        put :update, {:id => @song.to_param, 
          :song => FactoryGirl.attributes_for(:song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
        assigns(:song).should eq(@song)
      end

      it "redirects to the song" do
        put :update, {:id => @song.to_param, 
          :song => FactoryGirl.attributes_for(:song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session        
        response.should redirect_to(@song)
      end
    end

    describe "with invalid params" do

      it "locates the requested song" do
        put :update, {id: @song, song: FactoryGirl.attributes_for(:invalid_song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
        assigns(:song).should eq(@song)
      end


      it "assigns the song as @song" do
        # Trigger the behavior that occurs when invalid params are submitted
        Song.any_instance.stub(:save).and_return(false)
        put :update, {:id => @song.to_param, 
          :song => FactoryGirl.attributes_for(:invalid_song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session         
        assigns(:song).should eq(@song)
      end

      it "does not change the song's attributes" do
        put :update, {:id => @song.to_param, 
          :song => FactoryGirl.attributes_for(:invalid_song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session
        @song.reload
        @song.track.should_not eq('Invalid')
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Song.any_instance.stub(:save).and_return(false)
        put :update, {:id => @song.to_param, 
          :song => FactoryGirl.attributes_for(:invalid_song),
          :artist_name => @artist.name, 
          :album_name => @album.album_title, 
          :genre => @album.genre}, valid_session 
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested song" do
      expect {
        delete :destroy, {:id => @song.to_param}, valid_session
      }.to change(Song, :count).by(-1)
    end

    it "redirects to the songs list" do
      delete :destroy, {:id => @song.to_param}, valid_session
      response.should redirect_to(songs_url)
    end
  end

end
